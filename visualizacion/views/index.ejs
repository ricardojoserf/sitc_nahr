<!DOCTYPE html>
<meta charset="utf-8">
<style>

@import url(https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Josefin+Slab|Arvo|Lato|Vollkorn|Abril+Fatface|Old+Standard+TT|Droid+Sans|Lobster|Inconsolata|Montserrat|Playfair+Display|Karla|Alegreya|Libre+Baskerville|Merriweather|Lora|Archivo+Narrow|Neuton|Signika|Questrial|Fjalla+One|Bitter|Varela+Round);

.background {
  fill: white;
  pointer-events: all;
}

.map-layer {
  fill: #fff;
  stroke: #aaa;
}

.effect-layer{
  pointer-events:none;
}

text{
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 12px;
}

text.big-text{
  font-size: 30px;
  font-weight: 400;
}

.effect-layer text, text.dummy-text{
  font-size: 12px;
}

path {
  stroke: #fff;
  fill-rule: evenodd;
}
#sb_1{
	position: absolute;
    top: 40px;
    right: 250px;
}
#sb_2{
	position: absolute;
    top: 350px;
    right: 500px;
}
#sb_3{
	position: absolute;
    top: 350px;
    right: 270px;
}
#sb_4{
	position: absolute;
    top: 350px;
    right: 30px;
}
.sb_title{
  font-family: 'Open sans','Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 16px;
  text-align: center;
}

</style>
<body>

<div id="container">
	<div id="map">
		<svg></svg>
		<div id="sb_1">
      <div id="sb_1_title"></div> 
    </div>
		<div id="sb_2">
      <div id="sb_2_title"></div>   
    </div>
		<div id="sb_3">
      <div id="sb_3_title"></div>   
    </div>
		<div id="sb_4">
      <div id="sb_4_title"></div>   
    </div>
    <div id="legend_m"></div>
    <div id="legend_l"></div>
	</div>
</div>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
var width = 860,
    height = 550,
    centered;

// Define color scale
var color = d3.scale.linear()
  .domain([1, 20])
  .clamp(true)
  .range(['#fff', '#409A99']);

var projection = d3.geo.mercator()
  .scale(1900)
  // Center the Map in Colombia
  .center([1.9, 46])
  .translate([width / 2, height / 2]);

var path = d3.geo.path()
  .projection(projection);

// Set svg width & height
var svg = d3.select('svg')
  .attr('width', width)
  .attr('height', height);

// Add background
svg.append('rect')
  .attr('class', 'background')
  .attr('width', width)
  .attr('height', height)
  .on('click', clicked);

var g = svg.append('g');

var effectLayer = g.append('g')
  .classed('effect-layer', true);

var mapLayer = g.append('g')
  .classed('map-layer', true);

var dummyText = g.append('text')
  .classed('dummy-text', true)
  .attr('x', 10)
  .attr('y', 30)
  .style('opacity', 0);

var bigText = g.append('text')
  .classed('big-text', true)
  .attr('x', 20)
  .attr('y', 45);

// Load map data
d3.json('regions.geojson', function(error, mapData) {
  var features = mapData.features;

  // Update color scale domain based on data
  color.domain([0, d3.max(features, nameLength)]);

  // Draw each province as a path
  mapLayer.selectAll('path')
      .data(features)
    .enter().append('path')
      .attr('d', path)
      .attr('vector-effect', 'non-scaling-stroke')
      .style('fill', function(d){
      	return map_colors[d.properties.nom];
      })
      .on('mouseover', mouseover)
      .on('mouseout', mouseout)
      .on('click', clicked);

  drawLegend();
});
// Get province name
function nameFn(d){
  return d && d.properties ? d.properties.nom : null;
}

// Get province name length
function nameLength(d){
  var n = nameFn(d);
  return n ? n.length : 0;
}

// Get province color
function fillFn(d){
  return color(nameLength(d));
}

// When clicked, zoom in
function clicked(d) {
  var x, y, k;

  // Compute centroid of the selected path
  if (d && centered !== d) {
    var centroid = path.centroid(d);
    x = centroid[0];
    y = centroid[1];
    k = 4;
    centered = d;
  } else {
    x = width / 2;
    y = height / 2;
    k = 1;
    centered = null;
  }

  // Highlight the clicked province
  mapLayer.selectAll('path')
    .style('fill', function(d){return centered && d===centered ? '#D5708B' : map_colors[d.properties.nom];});

  // Zoom
  g.transition()
    .duration(750)
    .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')scale(' + k + ')translate(' + -x + ',' + -y + ')');
}

function mouseover(d){
  // Highlight hovered province
  d3.select(this).style('fill', '#9a00e6').style('border-color', '#5a5a5a');

  var fontFamily = FONTS[0] + ', ' + BASE_FONT;
  bigText.text('');
  bigText
    .style('font-family', fontFamily)
    .text(nameFn(d));
  d3.selectAll(".sb_svg").remove();
  sunburst(nameFn(d));
}

function mouseout(d){
  // Reset province color
  mapLayer.selectAll('path')
    .style('fill', function(d){return centered && d===centered ? '#D5708B' : map_colors[d.properties.nom];});
  // Clear province name
}


var BASE_FONT = "'Helvetica Neue', Helvetica, Arial, sans-serif";

var FONTS = [
  "Open Sans",
  "Josefin Slab",
  "Arvo",
  "Lato",
  "Vollkorn",
  "Abril Fatface",
  "Old StandardTT",
  "Droid+Sans",
  "Lobster",
  "Inconsolata",
  "Montserrat",
  "Playfair Display",
  "Karla",
  "Alegreya",
  "Libre Baskerville",
  "Merriweather",
  "Lora",
  "Archivo Narrow",
  "Neuton",
  "Signika",
  "Questrial",
  "Fjalla One",
  "Bitter",
  "Varela Round"
];

var map_regions = {
  "Hauts-de-France":"Hauts-de-France.csv",
  "Grand Est":"Grand Est.csv",
  "Normandie":"Normandy.csv",
  "\u00cele-de-France":"Ile-de-France.csv",
  "Bretagne":"Brittany.csv",
  "Pays de la Loire":"Pays de la Loire.csv",
  "Centre-Val de Loire":"Centre-Val de Loire.csv",
  "Bourgogne-Franche-Comt\u00e9":"Bourgogne-Franche-Comte.csv",
  "Nouvelle-Aquitaine":"Nouvelle-Aquitain.csv",
  "Occitanie":"Occitanie.csv",
  "Auvergne-Rh\u00f4ne-Alpes":"Auvergne-Rhone-Alpes.csv",
  "Provence-Alpes-C\u00f4te d'Azur":"Provence-Alpes-Cote-dAzur.csv",
  "Corse":"Corsica.csv"
};

var map_colors = {
  "Hauts-de-France":"#858585",
  "Grand Est":"#989898",
  "Normandie":"#acacac",
  "\u00cele-de-France":"#c0c0c0",
  "Bretagne":"#d3d3d3",
  "Pays de la Loire":"#e7e7e7",
  "Centre-Val de Loire":"#7b7b7b",
  "Bourgogne-Franche-Comt\u00e9":"#f1f1f1",
  "Nouvelle-Aquitaine":"#dddddd",
  "Occitanie":"#c9c9c9",
  "Auvergne-Rh\u00f4ne-Alpes":"#b6b6b6",
  "Provence-Alpes-C\u00f4te d'Azur":"#a2a2a2",
  "Corse":"#8f8f8f"
};

var sb_colors_m = {
  "0":"white",
  "a_1":"#ff3b3b",
  "b_n":"#ff8989",
  "c_0":"#ffd8d8"
};
var sb_colors_l = {
  "0":"white",
  "a_1":"#266fff",
  "b_n":"#88b0ff",
  "c_0":"#d6e4ff"
};

function sunburst(d){

d3.select('#sb_1_title').attr('class', 'sb_title').text('Total');
d3.select('#sb_2_title').attr('class', 'sb_title').text('Diccionario');
d3.select('#sb_3_title').attr('class', 'sb_title').text('ML (tres polaridades)');
d3.select('#sb_4_title').attr('class', 'sb_title').text('ML (dos polaridades)');

create(1,"#sb_1", 250, 250);
create(2,"#sb_2", 200, 200);
create(3,"#sb_3", 200, 200);
create(4,"#sb_4", 200, 200);

function create(n, id, w, h){

	var width = w,
	    height = h,
	    radius = (Math.min(width, height) / 2) - 10;

	var formatNumber = d3.format(",d");

	var x = d3.scale.linear()
	    .range([0, 2 * Math.PI]);

	var y = d3.scale.sqrt()
	    .range([0, radius]);

	var color = d3.scale.category20c();

	var partition = d3.layout.partition()
	    .value(function(d) { return d.size; });

	var arc = d3.svg.arc()
	    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
	    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
	    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
	    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

	var svg = d3.select(id).append("svg")
		.attr("class", "sb_svg")
	    .attr("width", width)
	    .attr("height", height)
	  .append("g")
	    .attr("transform", "translate(" + width / 2 + "," + (height / 2) + ")");


	d3.csv('tweets_final/'+map_regions[d], function(error, reg) {

		reg = reg.filter(function(d){
			return (d.candidate === "Macron" || d.candidate === "LePen");
		});
		if (n === 1){
			var nested_data = d3.nest()
				.key(function(d) {return d.candidate; })
				.key(function(d) {return d.total; })
				.rollup(function(leaves) {return leaves.length; })
				.entries(reg);
		}else if(n === 2){
			var nested_data = d3.nest()
				.key(function(d) {return d.candidate; })
				.key(function(d) {return d.dic_rounded; })
				.rollup(function(leaves) {return leaves.length; })
				.entries(reg);
		}else if(n === 3){
			var nested_data = d3.nest()
				.key(function(d) {return d.candidate; })
				.key(function(d) {return d.media_tri; })
				.rollup(function(leaves) {return leaves.length; })
				.entries(reg);
		}else if(n === 4){
			var nested_data = d3.nest()
				.key(function(d) {return d.candidate; })
				.key(function(d) {return d.media_bin; })
				.rollup(function(leaves) {return leaves.length; })
				.entries(reg);
		}
		var root = {};

        root.key = "";
        root.values = nested_data;
        root = JSON.parse(JSON.stringify(root).replace(/"values":([0-9])/g, "\"size\":$1"));
        root = reSortRoot(root);
        function reSortRoot(root) {

          for (var key in root) {
              if (key == "key") {
                  root.name = root.key;
                  delete root.key;
              }
              if (key == "values") {
                  root.children = [];
                  for (item in root.values) {
                      root.children.push(reSortRoot(root.values[item]));
                  }
                  delete root.values;
              }
          }
          return root;
      }

	  svg.selectAll("path")
	      .data(partition.nodes(root))
	    .enter().append("path")
	      .attr("d", arc)
	      .style("fill", function(d) { 
	      	if((d.depth === 1) && (d.name === "Macron")){
	      		return "#ff1414";
	      	}else if((d.depth === 2) && (d.parent.name === "Macron") && (d.name === "1")){
	      		return "#ff3b3b";
	      	}else if((d.depth === 2) && (d.parent.name === "Macron") && (d.name === "0")){
	      		return "#ffd8d8";
	      	}else if((d.depth === 2) && (d.parent.name === "Macron") && ((d.name === "Neu") || (d.name === "2") || (d.name === "Nan"))){
	      		return "#ff8989";
	      	}else if((d.depth === 1) && (d.name === "LePen")){
	      		return "#1262ff";
	      	}else if((d.depth === 2) && (d.parent.name === "LePen") && (d.name === "1")){
	      		return "#266fff";
	      	}else if((d.depth === 2) && (d.parent.name === "LePen") && (d.name === "0")){
	      		return "#d6e4ff";
	      	}else if((d.depth === 2) && (d.parent.name === "LePen") && ((d.name === "Neu") || (d.name === "2") || (d.name === "Nan"))){
	      		return "#88b0ff";
	      	}else return "#d9d9d9";
	       })
	      .on("click", click)
	    .append("title")
	      .text(function(d) { return d.name + "\n" + formatNumber(d.value); });
	});

    function click(d) {
      svg.transition()
          .duration(750)
          .tween("scale", function() {
            var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
                yd = d3.interpolate(y.domain(), [d.y, 1]),
                yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
            return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
          })
        .selectAll("path")
          .attrTween("d", function(d) { return function() { return arc(d); }; });
    }

  }

  d3.select(self.frameElement).style("height", height + "px");

}
  function drawLegend() {

    // Dimensions of legend item: width, height, spacing, radius of rounded rect.
    var li = {
      w: 75, h: 30, s: 3, r: 3
    };

    var legend_m = d3.select("#legend_m").append("svg:svg")
        .attr("width", 4*(li.w + li.s))
        .attr("height", li.h);

    var g_m = legend_m.selectAll("g")
        .data(d3.entries(sb_colors_m))
        .enter().append("svg:g")
        .attr("transform", function(d, i) {
                return "translate("+ i* (li.w + li.s) +",0)";
             });

    g_m.append("svg:rect")
        .attr("rx", li.r)
        .attr("ry", li.r)
        .attr("width", li.w)
        .attr("height", li.h)
        .style("fill", function(d) { return d.value; });

    g_m.append("svg:text")
        .attr("x", li.w / 2)
        .attr("y", li.h / 2)
        .attr("dy", "0.35em")
        .attr("text-anchor", "middle")
        .text(function(d) {
          if (d.key === "a_1"){
            return "+"
          }else if (d.key === "b_n"){
            return "n"
          }else if (d.key === "c_0"){
            return "-"
          }else return "Macron"; 
        });



    var legend_l = d3.select("#legend_l").append("svg:svg")
        .attr("width", 4*(li.w + li.s))
        .attr("height", li.h);

    var g_l = legend_l.selectAll("g")
        .data(d3.entries(sb_colors_l))
        .enter().append("svg:g")
        .attr("transform", function(d, i) {
                console.log(d)
                return "translate("+ i * (li.w + li.s) +",0)";
             });

    g_l.append("svg:rect")
        .attr("rx", li.r)
        .attr("ry", li.r)
        .attr("width", li.w)
        .attr("height", li.h)
        .style("fill", function(d) { return d.value; });

    g_l.append("svg:text")
        .attr("x", li.w / 2)
        .attr("y", li.h / 2)
        .attr("dy", "0.35em")
        .attr("text-anchor", "middle")
        .text(function(d) {
          if (d.key === "a_1"){
            return "+"
          }else if (d.key === "b_n"){
            return "n"
          }else if (d.key === "c_0"){
            return "-"
          }else return "Le Pen"; 
        });
  }
</script>
